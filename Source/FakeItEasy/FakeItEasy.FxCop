<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.36" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">c:\program files (x86)\microsoft fxcop 1.36\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/bin/Debug/FakeItEasy.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInUnexpectedLocations" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithClsCompliant" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.36">
  <Namespaces>
   <Namespace Name="FakeItEasy.Core.Creation">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2010-03-21 21:15:10Z">
      <Issue>
       <Item>FakeItEasy.Core.Creation</Item>
      </Issue>
      <Notes>
       <User Name="Patrik">
        <Note Id="11" />
       </User>
      </Notes>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.Expressions">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2010-03-21 21:15:10Z">
      <Issue>
       <Item>FakeItEasy.Expressions</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.ExtensionSyntax">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2009-12-25 00:06:38Z">
      <Issue>
       <Item>FakeItEasy.ExtensionSyntax</Item>
      </Issue>
      <Notes>
       <User Name="Patrik">
        <Note Id="10" />
       </User>
      </Notes>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.ExtensionSyntax.Full">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2009-09-07 22:24:20Z">
      <Issue>
       <Item>FakeItEasy.ExtensionSyntax.Full</Item>
      </Issue>
      <Notes>
       <User Name="Patrik">
        <Note Id="0" />
       </User>
      </Notes>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/bin/Debug/FakeItEasy.dll">
    <Modules>
     <Module Name="fakeiteasy.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2009-09-05 10:55:05Z">
        <Issue Name="NoStrongName">
         <Item>'FakeItEasy.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="FakeItEasy">
        <Types>
         <Type Name="A">
          <Messages>
           <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeMoreMeaningfulName">
             <Item>'A'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#CallTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.CallTo&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="9" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Dummy`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.Dummy&lt;T&gt;()'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Fake`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.Fake&lt;T&gt;()'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Fake`1(System.Action`1&lt;FakeItEasy.Core.IFakeOptionsBuilder`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'A.Fake&lt;T&gt;(Action&lt;IFakeOptionsBuilder&lt;T&gt;&gt;)'</Item>
               <Item>'Action&lt;IFakeOptionsBuilder&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="13" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="A`1">
          <Messages>
           <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeMoreMeaningfulName">
             <Item>'A&lt;T&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Ignored">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A&lt;T&gt;.Ignored'</Item>
               <Item>'A&lt;T&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="8" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#That">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A&lt;T&gt;.That'</Item>
               <Item>'A&lt;T&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="8" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Any">
          <Members>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="2" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="1" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Fake">
          <Members>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetCalls(System.Object)">
            <Messages>
             <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.GetCalls(object)'</Item>
               <Item>Object</Item>
               <Item>'fakedObject'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetFakeObject(System.Object)">
            <Messages>
             <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.GetFakeObject(object)'</Item>
               <Item>Object</Item>
               <Item>'fakedObject'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Fake`1">
          <Members>
           <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-09-05 10:55:05Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.Fake(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-09-05 10:55:05Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.CallsTo&lt;TMember&gt;(Expression&lt;Func&lt;T, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeExtensions">
          <Members>
           <Member Name="#Matching`1(System.Collections.Generic.IEnumerable`1&lt;FakeItEasy.Core.ICompletedFakeObjectCall&gt;,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'callSpecification'</Item>
               <Item>'FakeExtensions.Matching&lt;TFake&gt;(this IEnumerable&lt;ICompletedFakeObjectCall&gt;, Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
               <Item>'LambdaExpression'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="15" />
               </User>
              </Notes>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'FakeExtensions.Matching&lt;TFake&gt;(this IEnumerable&lt;ICompletedFakeObjectCall&gt;, Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="16" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Raise">
          <Members>
           <Member Name="#With`1(System.Object,!!0)">
            <Messages>
             <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Raise.With&lt;TEventArgs&gt;(object, TEventArgs)'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="3" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Raise`1">
          <Members>
           <Member Name="#Now(System.Object,!0)">
            <Messages>
             <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Raise&lt;TEventArgs&gt;.Now(object, TEventArgs)'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="3" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Repeated">
          <Members>
           <Member Name="#Like(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'Repeated.Like(Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;int, bool&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="14" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SmellyAttribute">
          <Messages>
           <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Excluded" Created="2010-03-21 21:15:10Z">
            <Issue>
             <Item>'SmellyAttribute'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Configuration">
        <Types>
         <Type Name="IAfterCallSpecifiedWithOutAndRefParametersConfiguration">
          <Messages>
           <Message Id="WithOut" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeShouldBeDiscreteTerm">
             <Item>WithOut</Item>
             <Item>'IAfterCallSpecifiedWithOutAndRefParametersConfiguration'</Item>
             <Item>Without</Item>
            </Issue>
            <Notes>
             <User Name="Patrik">
              <Note Id="5" />
             </User>
            </Notes>
           </Message>
          </Messages>
         </Type>
         <Type Name="IAnyCallConfiguration">
          <Members>
           <Member Name="#WithReturnType`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IAnyCallConfiguration.WithReturnType&lt;TMember&gt;()'</Item>
               <Item>'TMember'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IHideObjectMembers">
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'IHideObjectMembers.Equals(object)'</Item>
               <Item>'o'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetType()">
            <Messages>
             <Message Id="GetType" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="Member">
               <Item>'IHideObjectMembers.GetType()'</Item>
               <Item>GetType</Item>
              </Issue>
             </Message>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Certainty="50">
               <Item>'IHideObjectMembers.GetType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IStartConfiguration`1">
          <Members>
           <Member Name="#CallsTo(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IStartConfiguration&lt;TFake&gt;.CallsTo(Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="6" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IStartConfiguration&lt;TFake&gt;.CallsTo&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="6" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Core">
        <Types>
         <Type Name="ArgumentCollection">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeNoAlternate">
             <Item>'ArgumentCollection'</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Get`1(System.Int32)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentCollection.Get&lt;T&gt;(int)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Get`1(System.String)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentCollection.Get&lt;T&gt;(string)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DelegateFakeObjectContainer">
          <Members>
           <Member Name="#ConfigureFake(System.Type,System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'DelegateFakeObjectContainer.ConfigureFake(Type, object)'</Item>
               <Item>'typeOfFake'</Item>
               <Item>'typeOfFakeObject'</Item>
               <Item>'IFakeObjectContainer.ConfigureFake(Type, object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeObject+EventRule">
          <Messages>
           <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Excluded" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
            <Issue Name="NonBreaking">
             <Item>'FakeObject.EventRule'</Item>
             <Item>'EventHandlerList'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FakeObject+Factory">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue>
             <Item>'FakeObject.Factory'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FakeObjectBuilder+FakeGenerationOptions">
          <Members>
           <Member Name="#Interfaces">
            <Accessors>
             <Accessor Name="#set_Interfaces(System.Collections.Generic.ICollection`1&lt;System.Type&gt;)">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Excluded" Created="2010-03-21 21:15:10Z">
                <Issue>
                 <Item>'FakeObjectBuilder.FakeGenerationOptions.Interfaces.set(ICollection&lt;Type&gt;)'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeObjectFactory+GeneratorCommand">
          <Members>
           <Member Name="#GenerateFakeObject()">
            <Messages>
             <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'FakeObjectFactory.GeneratorCommand.GenerateFakeObject()'</Item>
               <Item>'Exception'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ICallMatcher">
          <Members>
           <Member Name="#Matches(FakeItEasy.Core.IFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ICallMatcher.Matches(IFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFakeObjectContainer">
          <Members>
           <Member Name="#ConfigureFake(System.Type,System.Object)">
            <Messages>
             <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IFakeObjectContainer.ConfigureFake(Type, object)'</Item>
               <Item>Object</Item>
               <Item>'fakeObject'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TryCreateFakeObject(System.Type,System.Object&amp;)">
            <Messages>
             <Message TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeObjectContainer.TryCreateFakeObject(Type, out object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFakeOptionsBuilder`1">
          <Members>
           <Member Name="#Implements(System.Type)">
            <Messages>
             <Message Id="Implements" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue Name="Member">
               <Item>'IFakeOptionsBuilder&lt;T&gt;.Implements(Type)'</Item>
               <Item>Implements</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WithArgumentsForConstructor(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'IFakeOptionsBuilder&lt;T&gt;.WithArgumentsForConstructor(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MethodInfoManager+TypeMethodInfoPair">
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'MethodInfoManager.TypeMethodInfoPair'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Core.Creation">
        <Types>
         <Type Name="IProxyGeneratorNew">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Excluded" Created="2010-03-21 21:15:10Z">
            <Issue Name="TypeNewerVersion">
             <Item>New</Item>
             <Item>'IProxyGeneratorNew'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="ProxyResult">
          <Members>
           <Member Name="#.ctor(System.Type)">
            <Messages>
             <Message Id="proxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue Name="MemberParameter">
               <Item>'ProxyResult.ProxyResult(Type)'</Item>
               <Item>proxied</Item>
               <Item>'proxiedType'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="12" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ProxiedType">
            <Messages>
             <Message Id="Proxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue Name="Member">
               <Item>Proxied</Item>
               <Item>'ProxyResult.ProxiedType'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="12" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.DynamicProxy">
        <Types>
         <Type Name="DynamicProxyProxyGenerator+DynamicProxyResult">
          <Members>
           <Member Name="#.ctor(System.Type)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'DynamicProxyProxyGenerator.DynamicProxyResult.DynamicProxyResult(Type)'</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;DynamicProxyProxyGenerator+DynamicProxyResult..ctor(Type)&#xD;&#xA;ProxyResult.set_ProxyWasSuccessfullyCreated(Boolean):Void</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="18" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#.ctor(System.Type,System.String)">
            <Messages>
             <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'DynamicProxyProxyGenerator.DynamicProxyResult.DynamicProxyResult(Type, string)'</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;DynamicProxyProxyGenerator+DynamicProxyResult..ctor(Type, String)&#xD;&#xA;ProxyResult.set_ProxyWasSuccessfullyCreated(Boolean):Void</Item>
              </Issue>
              <Issue>
               <Item>'DynamicProxyProxyGenerator.DynamicProxyResult.DynamicProxyResult(Type, string)'</Item>
               <Item>&#xD;&#xA;&#xD;&#xA;DynamicProxyProxyGenerator+DynamicProxyResult..ctor(Type, String)&#xD;&#xA;ProxyResult.set_ProxyWasSuccessfullyCreated(Boolean):Void&#xD;&#xA;ProxyResult.set_ErrorMessage(String):Void</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="18" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Expressions">
        <Types>
         <Type Name="ArgumentConstraint">
          <Members>
           <Member Name="#Or`1(FakeItEasy.Expressions.ArgumentConstraint`1&lt;!!0&gt;,System.Func`2&lt;FakeItEasy.Expressions.ArgumentConstraintScope`1&lt;!!0&gt;,FakeItEasy.Expressions.ArgumentConstraint`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'ArgumentConstraint.Or&lt;T&gt;(this ArgumentConstraint&lt;T&gt;, Func&lt;ArgumentConstraintScope&lt;T&gt;, ArgumentConstraint&lt;T&gt;&gt;)'</Item>
               <Item>'Func&lt;ArgumentConstraintScope&lt;T&gt;, ArgumentConstraint&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="17" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ArgumentConstraintScope`1">
          <Members>
           <Member Name="#IsInstanceOf`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Excluded" Created="2010-03-21 21:15:10Z">
              <Issue>
               <Item>'ArgumentConstraintScope&lt;T&gt;.IsInstanceOf&lt;TType&gt;()'</Item>
               <Item>'TType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.ExtensionSyntax.Full">
        <Types>
         <Type Name="FullExtensionSyntax">
          <Members>
           <Member Name="#CallsTo`1(!!0,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'FullExtensionSyntax.CallsTo&lt;TFake&gt;(this TFake, Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="21" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`2(!!0,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'FullExtensionSyntax.CallsTo&lt;TFake, TMember&gt;(this TFake, Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="21" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.SelfInitializedFakes">
        <Types>
         <Type Name="ISelfInitializingFakeRecorder">
          <Members>
           <Member Name="#ApplyNext(FakeItEasy.Core.IWritableFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ISelfInitializingFakeRecorder.ApplyNext(IWritableFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#RecordCall(FakeItEasy.Core.ICompletedFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ISelfInitializingFakeRecorder.RecordCall(ICompletedFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RecordingManager">
          <Messages>
           <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="ProvideDisposeBool">
             <Item>'RecordingManager'</Item>
            </Issue>
            <Notes>
             <User Name="Patrik">
              <Note Id="20" />
             </User>
            </Notes>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Dispose()">
            <Messages>
             <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="NotCalled">
               <Item>'RecordingManager.Dispose()'</Item>
               <Item>'GC.SuppressFinalize(object)'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="19" />
               </User>
              </Notes>
             </Message>
             <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="DisposeImplementation">
               <Item>'RecordingManager.Dispose()'</Item>
              </Issue>
              <Issue Name="DisposeSignature">
               <Item>'RecordingManager.Dispose()'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="20" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Notes>
   <User Name="Patrik">
    <Note Id="0" Modified="2009-09-07 22:25:01Z">Must be a namespace of it's own in order to control if the extensions should be used or not.</Note>
    <Note Id="1" Modified="2009-12-25 00:08:18Z">Uses the same names as the hidden method.</Note>
    <Note Id="2" Modified="2009-12-25 00:08:31Z">Uses the same names as the hidden methods.</Note>
    <Note Id="3" Modified="2009-12-25 00:08:55Z">By design, must be this way in order to use it to raise events.</Note>
    <Note Id="5" Modified="2009-12-25 00:11:58Z">Means "with out", not "without".</Note>
    <Note Id="6" Modified="2009-12-25 00:12:40Z">By design.</Note>
    <Note Id="7" Modified="2009-12-25 00:12:52Z">By design.</Note>
    <Note Id="8" Modified="2009-12-25 00:13:49Z">By design, this is a special case since the type parameter is used to display the type of the argument.</Note>
    <Note Id="9" Modified="2009-12-25 00:14:20Z">By design.</Note>
    <Note Id="10" Modified="2010-03-21 21:15:39Z">Put in it's own namespace so that it can be used separately as extension methods.</Note>
    <Note Id="11" Modified="2010-03-21 21:16:45Z">Does contain enough types.</Note>
    <Note Id="12" Modified="2010-03-21 21:17:12Z">Correct spelling.</Note>
    <Note Id="13" Modified="2010-03-21 21:18:14Z">By design.</Note>
    <Note Id="14" Modified="2010-03-21 21:18:21Z">By design.</Note>
    <Note Id="15" Modified="2010-03-21 21:19:42Z">Would make the api unusable.</Note>
    <Note Id="16" Modified="2010-03-21 21:19:52Z">By design.</Note>
    <Note Id="17" Modified="2010-03-21 21:20:10Z">By design.</Note>
    <Note Id="18" Modified="2010-03-21 21:22:07Z">Acceptable since they're only properties and only virtual for testability.</Note>
    <Note Id="19" Modified="2010-03-21 21:22:28Z">The dispose method is not used to dispose of unmanaged resources in this case.</Note>
    <Note Id="20" Modified="2010-03-21 21:22:53Z">Dispose is not used to dispose unmanaged resources in this case.</Note>
    <Note Id="21" Modified="2010-03-21 21:23:08Z">By design.</Note>
   </User>
  </Notes>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default" />
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
    <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   </Rule>
   <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
    <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   </Rule>
   <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
    <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
    <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   </Rule>
   <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
    <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
    <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   </Rule>
   <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
    <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
    <Resolution Name="TypeMoreMeaningfulName">Consider providing a more meaningful name than type name {0}.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
    <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="TypeNewerVersion">Either replace the suffix '{0}' in type name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Resolution>
    <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   </Rule>
   <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
    <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
    <Resolution Name="DisposeSignature">Ensure that {0} is declared as public and sealed.</Resolution>
    <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
    <Resolution Name="Default">Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109">
    <Resolution Name="Default">Consider making {0} not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
    <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   </Rule>
   <Rule TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007">
    <Resolution Name="Default">Consider using generics instead of a reference to System.Object in {0}.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
